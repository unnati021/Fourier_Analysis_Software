#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Jul 16, 2018 01:13:50 PM

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import window_fft_support
import matplotlib.pyplot as plt
from scipy.fftpack import fft,ifft
import numpy as np
import math
from scipy import signal

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    window_fft_support.set_Tk_var()
    top = New_Toplevel (root)
    window_fft_support.init(root, top)
    root.mainloop()

w = None
def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    window_fft_support.set_Tk_var()
    top = New_Toplevel (w)
    window_fft_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None


class New_Toplevel:
    def butfunc(self):
        a=self.Entry1.get()#Sampling Rate
        b=self.Entry2.get()#capacitance
        c=self.Entry3.get()#inductance
        d=window_fft_support.che46.get()#sine
        e=window_fft_support.che47.get()#square
        f=window_fft_support.che48.get()#triangular
        hwr=window_fft_support.che49.get()#HWR
        fwr=window_fft_support.che50.get()#FWR
        
        g=window_fft_support.che61.get()#add
        #h=window_fft_support.che62.get()#sample
        
        smw=window_fft_support.che52.get()#select more than one wave
        
        fwave1=self.Entry4.get()
        fwave2=self.Entry19.get()
        fwave3=self.Entry11.get()
        aa=self.Entry5.get()#wave to be sampled
        dcs=self.Entry6.get()#duty cycle for square wave
        dct=self.Entry7.get()#duty cycle for triangular wave
        #=self.Entry8.get()#div. factor

        win=window_fft_support.che65.get()
        hamm=window_fft_support.che66.get()
        hann=window_fft_support.che68.get()
        bla=window_fft_support.che69.get()
        kais=window_fft_support.che70.get()
        beta=self.Entry9.get()
        micF=window_fft_support.che71.get()
        milF=window_fft_support.che72.get()
        micH=window_fft_support.che73.get()
        milH=window_fft_support.che74.get()
        custom1=window_fft_support.che75.get()
        custom2=window_fft_support.che76.get()
        wave1=window_fft_support.che78.get()
        wave2=window_fft_support.che79.get()
        wave3=window_fft_support.che80.get()
        typewave1=window_fft_support.che81.get()
        typewave2=window_fft_support.che82.get()
        typewave3=window_fft_support.che83.get()
        print(typewave1)
        
        if int(smw)==0:
            ff=float(aa)
        else:
            ff=0
        
        
        #print(a)
        #print(b)
        #print(c)
        #print(no_wave)
        #print(aa)
        #print(dcs)
        #print(dct)
        #print(val)
        
        #DCS=float(dcs)
        if int(custom2)==0:
            fff=10.0
            
        else:
            print (milH)
            if int(micF)==1:
                C=float(b)/(10**6)
            elif int(milF)==1:
                C=float(b)/(10**3)
            else:
                C=float(b)
            if int(micH)==1:
                L=float(c)/(10**6)
            elif int(milH)==1:
                L=float(c)/(10**3)
            else :
                L=float(c)
        
        
            z=math.sqrt(4*np.pi*np.pi*L*C)
            fff=1/z
            print (fff)
            #ff=float(aa)
        
                
                
            
                
                
        
        if int(custom1)==0:
            gleba=150
            T=1/150
            t=np.arange(0,1,T)
        else:
            if ff>0 and ff<500:
                gleba=1000
                T=1/1000
                t=np.arange(0,0.05,T)
            elif ff>500 and ff<1000:
                gleba=2200
                T=1/2200
                t=np.arange(0,0.05,T)
            
            
            elif ff>1000 and ff<10000:
                gleba=20000
                T=1/20000
                t=np.arange(0,0.005,T)
            else:
                gleba=40000
                T=1/40000
                t=np.arange(0,0.005,T)

        
        valid=0
        if int(smw)==0:
            if ff>=fff and gleba>=(2*ff):
                valid=1
                print ('valid')
            
            
            
        
        #y=fft(x)
        if int(smw)==0 and ff >= fff and valid == 1  :
            
            if int(g)==1:
                i=0
                v=0
                x1=[]
                x=0
                if int(d)==1 and int(e)==1:
                    DCS=float(dcs)/100
                    x=np.sin(2*np.pi*t*ff)+signal.square((2*np.pi*t*ff),DCS)
                elif int(d)==1 and int(f)==1:
                    DCT=float(dct)/100
                    x=np.sin(2*np.pi*t*ff)+signal.sawtooth((2*np.pi*t*ff),DCT)
                elif int(e)==1 and int(f)==1:
                    DCS=float(dcs)/100
                    DCT=float(dct)/100
                    x=signal.sawtooth((2*np.pi*t*ff),DCT)+signal.square((2*np.pi*t*ff),DCS)
                elif int(d)==1 and int(e)==1 and int(f)==1:
                    DCS=float(dcs)/100
                    DCT=float(dct)/100
                    x=np.sin(2*np.pi*t*ff)+signal.square((2*np.pi*t*ff),DCS)+signal.sawtooth((2*np.pi*t*ff),DCT)
                
                    
                    
                       # x=np.sin(2*np.pi*t*ff)+np.sin(2*np.pi*t*1000)
                #for i in range(no_of_waves):
                    
                    #x1.append(np.sin(2*np.pi*t*ff))
                
                #if int(h)==1:
                    #aaa=int(aa)
                    #que=aaa-1
                    #del x1[que]
                    
                    #x1.append(np.sin(2*np.pi*ff*t)*float(val))
                #for v in range(no_of_waves):
                    #x = x + x1[v]
                    
            
                if int(win)==1:
                   if int(hamm)==1:
                       be=5
                   elif int(hann)==1:
                       be=6
                   elif int(bla)==1:
                       be=8.6
                   else:
                       be=int(beta)
                   z=np.kaiser(gleba,be)
                   x=x*z
                n = len(x) # length of the signal 
                k = np.arange(n)
                T = n/gleba
                frq = k/T # two sides frequency range
                frq = frq[range(n//2)] # one side frequency range

                Y = np.fft.fft(x)/n # fft computing and normalization
                Y = Y[range(n//2)]
                plt.subplot(311)
                plt.plot(t,x)
                plt.xlabel('time')
                plt.ylabel('amplitude')
                plt.title('INPUT')
                plt.subplot(313)
                plt.plot(frq,abs(Y))
                plt.xlabel('frequency(Hz)')
                plt.ylabel('amplitude')
                plt.title('OUTPUT')
                plt.show()
               
            #elif int(h)==1:
               #if int(d)==1:
                    #x=np.sin(2*np.pi*ff*t)*float(val)
               #elif int(e)==1:
                    #DCS=float(dcs)/100
                
                    #x=signal.square((2*np.pi*ff*t),DCS)*float(val)
               #elif int(f)==1:
                
                    #DCT=float(dct)/100
                    #x=signal.sawtooth((2*np.pi*ff*t),DCT)*float(val)
               #y=fft(x)
               #if int(win)==1:
                    
            else:
               if int(d)==1:
                   x=np.sin(2*np.pi*ff*t)
               elif int(e)==1:
                   DCS=float(dcs)/100
                
                   x=signal.square((2*np.pi*ff*t),DCS)
               elif int(f)==1:
                
                   DCT=float(dct)/100
                   x=signal.sawtooth((2*np.pi*ff*t),DCT)
               elif int(hwr)==1:
                   x=np.sin(2*np.pi*ff*t)
                   x=np.clip(x,0,None,x)
               elif int(fwr)==1:
                   ns=np.sin(2*np.pi*ff*t)
                   ns=np.clip(ns,0,None,ns)
                   ins=(np.sin(2*np.pi*ff*t))*-1
                   ins=np.clip(ins,0,None,ins)
                   x=ns+ins

               if int(win)==1:
                   if int(hamm)==1:
                       be=5
                   elif int(hann)==1:
                       be=6
                   elif int(bla)==1:
                       be=8.6
                   else:
                       be=int(beta)
                   z=np.kaiser(gleba,be)
                   x=x*z
                
               n = len(x) # length of the signal
               k = np.arange(n)
               T = n/gleba
               frq = k/T # two sides frequency range
               frq = frq[range(n//2)] # one side frequency range

               Y = np.fft.fft(x)/n # fft computing and normalization
               Y = Y[range(n//2)]
               plt.subplot(311)
               plt.plot(t,x)
               plt.xlabel('time')
               plt.ylabel('amplitude')
               plt.title('INPUT')
               plt.subplot(313)
               plt.plot(frq,abs(Y))
               plt.xlabel('frequency(Hz)')
               plt.ylabel('amplitude')
               plt.title('OUTPUT')
               plt.show()

        elif int(smw)==1 and int(g)==1:
            if int(wave1)==1 and int(wave2)==1:
                print('entering fnc')
                
                fw01=float(fwave1)
                fw02=float(fwave2)
                if typewave1 == 'sine' and typewave2 == 'sine':
                    x=np.sin(2*np.pi*t*fw01)+np.sin(2*np.pi*t*fw02)
                elif typewave1 == 'sine' and typewave2 == 'tria':
                    x=np.sin(2*np.pi*t*fw01)+signal.sawtooth(2*np.pi*t*fw02)
                elif typewave1 == 'sine' and typewave2 == 'sqrz':
                    x=np.sin(2*np.pi*t*fw01)+signal.square(2*np.pi*t*fw02)
                elif typewave1 == 'tria' and typewave2 == 'sine':
                    x=signal.sawtooth(2*np.pi*t*fw01)+np.sin(2*np.pi*t*fw02)
                elif typewave1 == 'tria' and typewave2 == 'tria':
                    x=signal.sawtooth(2*np.pi*t*fw01)+signal.sawtooth(2*np.pi*t*fw02)
                elif typewave1 == 'tria' and typewave2 == 'sqrz':
                    x=signal.sawtooth(2*np.pi*t*fw01)+signal.square(2*np.pi*t*fw02)
                elif typewave1 == 'sqrz' and typewave2 == 'sine':
                    x=signal.square(2*np.pi*t*fw01)+np.sin(2*np.pi*t*fw02)
                elif typewave1 == 'sqrz' and typewave2 == 'tria':
                    x=signal.square(2*np.pi*t*fw01)+signal.sawtooth(2*np.pi*t*fw02)
                elif typewave1 == 'sqrz' and typewave2 == 'sqrz':
                    x=signal.square(2*np.pi*t*fw01)+np.square(2*np.pi*t*fw02)
            elif int(wave1)==1 and int(wave3)==1:
                fw01=float(fwave1)
                fw03=float(fwave3)
                if typewave1 == 'sine' and typewave3 == 'sine':
                    x=np.sin(2*np.pi*t*fw01)+np.sin(2*np.pi*t*fw03)
                elif typewave1 == 'sine' and typewave3 == 'tria':
                    x=np.sin(2*np.pi*t*fw01)+signal.sawtooth(2*np.pi*t*fw03)
                elif typewave1 == 'sine' and typewave3 == 'sqrz':
                    x=np.sin(2*np.pi*t*fw01)+signal.square(2*np.pi*t*fw03)
                elif typewave1 == 'tria' and typewave3 == 'sine':
                    x=signal.sawtooth(2*np.pi*t*fw01)+np.sin(2*np.pi*t*fw03)
                elif typewave1 == 'tria' and typewave3 == 'tria':
                    x=signal.sawtooth(2*np.pi*t*fw01)+signal.sawtooth(2*np.pi*t*fw03)
                elif typewave1 == 'tria' and typewave3 == 'sqrz':
                    x=signal.sawtooth(2*np.pi*t*fw01)+signal.square(2*np.pi*t*fw03)
                elif typewave1 == 'sqrz' and typewave3 == 'sine':
                    x=signal.square(2*np.pi*t*fw01)+np.sin(2*np.pi*t*fw03)
                elif typewave1 == 'sqrz' and typewave3 == 'tria':
                    x=signal.square(2*np.pi*t*fw01)+signal.sawtooth(2*np.pi*t*fw03)
                elif typewave1 == 'sqrz' and typewave3 == 'sqrz':
                    x=signal.square(2*np.pi*t*fw01)+np.square(2*np.pi*t*fw03)
            elif int(wave2)==1 and int(wave3)==1:
                fw02=float(fwave2)
                fw03=float(fwave3)
                if typewave2 == 'sine' and typewave3 == 'sine':
                    x=np.sin(2*np.pi*t*fw02)+np.sin(2*np.pi*t*fw03)
                elif typewave2 == 'sine' and typewave3 == 'tria':
                    x=np.sin(2*np.pi*t*fw02)+signal.sawtooth(2*np.pi*t*fw03)
                elif typewave2 == 'sine' and typewave3 == 'sqrz':
                    x=np.sin(2*np.pi*t*fw02)+signal.square(2*np.pi*t*fw03)
                elif typewave2 == 'tria' and typewave3 == 'sine':
                    x=signal.sawtooth(2*np.pi*t*fw02)+np.sin(2*np.pi*t*fw03)
                elif typewave2 == 'tria' and typewave3 == 'tria':
                    x=signal.sawtooth(2*np.pi*t*fw02)+signal.sawtooth(2*np.pi*t*fw03)
                elif typewave2 == 'tria' and typewave3 == 'sqrz':
                    x=signal.sawtooth(2*np.pi*t*fw02)+signal.square(2*np.pi*t*fw03)
                elif typewave2 == 'sqrz' and typewave3 == 'sine':
                    x=signal.square(2*np.pi*t*fw02)+np.sin(2*np.pi*t*fw03)
                elif typewave2 == 'sqrz' and typewave3 == 'tria':
                    x=signal.square(2*np.pi*t*fw02)+signal.sawtooth(2*np.pi*t*fw03)
                elif typewave2 == 'sqrz' and typewave3 == 'sqrz':
                    x=signal.square(2*np.pi*t*fw02)+np.square(2*np.pi*t*fw03)
            elif int(wave1)==1 and int(wave2)==1 and int(wave3)==1:
                fw01=float(fwave1)
                fw02=float(fwave2)
                fw03=float(fwave3)
                if typewave1 == 'sine':
                    x=np.sin(np.pi*2*t*fw01)
                    if typewave2 == 'sine' and typewave3 == 'sine':
                        x= x + np.sin(2*np.pi*t*fw02)+np.sin(2*np.pi*t*fw03)
                    elif typewave2 == 'sine' and typewave3 == 'tria':
                        x= x +  np.sin(2*np.pi*t*fw02)+signal.sawtooth(2*np.pi*t*fw03)
                    elif typewave2 == 'sine' and typewave3 == 'sqrz':
                        x= x + np.sin(2*np.pi*t*fw02)+signal.square(2*np.pi*t*fw03)
                    elif typewave2 == 'tria' and typewave3 == 'sine':
                        x= x + signal.sawtooth(2*np.pi*t*fw02)+np.sin(2*np.pi*t*fw03)
                    elif typewave2 == 'tria' and typewave3 == 'tria':
                        x=x + signal.sawtooth(2*np.pi*t*fw02)+signal.sawtooth(2*np.pi*t*fw03)
                    elif typewave2 == 'tria' and typewave3 == 'sqrz':
                        x= x + signal.sawtooth(2*np.pi*t*fw02)+signal.square(2*np.pi*t*fw03)
                    elif typewave2 == 'sqrz' and typewave3 == 'sine':
                        x= x + signal.square(2*np.pi*t*fw02)+np.sin(2*np.pi*t*fw03)
                    elif typewave2 == 'sqrz' and typewave3 == 'tria':
                        x= x + signal.square(2*np.pi*t*fw02)+signal.sawtooth(2*np.pi*t*fw03)
                    elif typewave2 == 'sqrz' and typewave3 == 'sqrz':
                        x= x + signal.square(2*np.pi*t*fw02)+np.square(2*np.pi*t*fw03)
                elif typewave1 == 'tria':
                    x=signal.sawtooth(np.pi*2*t*fw01)
                    if typewave2 == 'sine' and typewave3 == 'sine':
                        x= x + np.sin(2*np.pi*t*fw02)+np.sin(2*np.pi*t*fw03)
                    elif typewave2 == 'sine' and typewave3 == 'tria':
                        x= x +  np.sin(2*np.pi*t*fw02)+signal.sawtooth(2*np.pi*t*fw03)
                    elif typewave2 == 'sine' and typewave3 == 'sqrz':
                        x= x + np.sin(2*np.pi*t*fw02)+signal.square(2*np.pi*t*fw03)
                    elif typewave2 == 'tria' and typewave3 == 'sine':
                        x= x + signal.sawtooth(2*np.pi*t*fw02)+np.sin(2*np.pi*t*fw03)
                    elif typewave2 == 'tria' and typewave3 == 'tria':
                        x=x + signal.sawtooth(2*np.pi*t*fw02)+signal.sawtooth(2*np.pi*t*fw03)
                    elif typewave2 == 'tria' and typewave3 == 'sqrz':
                        x= x + signal.sawtooth(2*np.pi*t*fw02)+signal.square(2*np.pi*t*fw03)
                    elif typewave2 == 'sqrz' and typewave3 == 'sine':
                        x= x + signal.square(2*np.pi*t*fw02)+np.sin(2*np.pi*t*fw03)
                    elif typewave2 == 'sqrz' and typewave3 == 'tria':
                        x= x + signal.square(2*np.pi*t*fw02)+signal.sawtooth(2*np.pi*t*fw03)
                    elif typewave2 == 'sqrz' and typewave3 == 'sqrz':
                        x= x + signal.square(2*np.pi*t*fw02)+np.square(2*np.pi*t*fw03)
                elif typewave1 == 'sqrz':
                    x=signal.square(np.pi*2*t*fw01)
                    if typewave2 == 'sine' and typewave3 == 'sine':
                        x= x + np.sin(2*np.pi*t*fw02)+np.sin(2*np.pi*t*fw03)
                    elif typewave2 == 'sine' and typewave3 == 'tria':
                        x= x +  np.sin(2*np.pi*t*fw02)+signal.sawtooth(2*np.pi*t*fw03)
                    elif typewave2 == 'sine' and typewave3 == 'sqrz':
                        x= x + np.sin(2*np.pi*t*fw02)+signal.square(2*np.pi*t*fw03)
                    elif typewave2 == 'tria' and typewave3 == 'sine':
                        x= x + signal.sawtooth(2*np.pi*t*fw02)+np.sin(2*np.pi*t*fw03)
                    elif typewave2 == 'tria' and typewave3 == 'tria':
                        x=x + signal.sawtooth(2*np.pi*t*fw02)+signal.sawtooth(2*np.pi*t*fw03)
                    elif typewave2 == 'tria' and typewave3 == 'sqrz':
                        x= x + signal.sawtooth(2*np.pi*t*fw02)+signal.square(2*np.pi*t*fw03)
                    elif typewave2 == 'sqrz' and typewave3 == 'sine':
                        x= x + signal.square(2*np.pi*t*fw02)+np.sin(2*np.pi*t*fw03)
                    elif typewave2 == 'sqrz' and typewave3 == 'tria':
                        x= x + signal.square(2*np.pi*t*fw02)+signal.sawtooth(2*np.pi*t*fw03)
                    elif typewave2 == 'sqrz' and typewave3 == 'sqrz':
                        x= x + signal.square(2*np.pi*t*fw02)+np.square(2*np.pi*t*fw03)
            n = len(x) # length of the signal
            k = np.arange(n)
            T = n/gleba
            frq = k/T # two sides frequency range
            frq = frq[range(n//2)] # one side frequency range

            Y = np.fft.fft(x)/n # fft computing and normalization
            Y = Y[range(n//2)]
            plt.subplot(311)
            plt.plot(t,x)
            plt.xlabel('time')
            plt.ylabel('amplitude')
            plt.title('INPUT')
            plt.subplot(313)
            plt.plot(frq,abs(Y))
            plt.xlabel('frequency(Hz)')
            plt.ylabel('amplitude')
            plt.title('OUTPUT')
            plt.show()
            print('all okay')
            
                

                        
                        
                    
                
                
                
                    
        else:
            if ff<fff:
                window_fft_support.che77.set('''Invalid capacitance and inductance.
Input frequency must be greater than 5Hz.''')
            elif valid == 0:
                if ff>0 and ff<500:
                    window_fft_support.che77.set('''Sampling Rate must be
around 1000''')
                elif ff>500 and ff<1000:
                    window_fft_support.che77.set('''Sampling rate must be
around 2000''')
                elif ff>1000 and ff<10000:
                    window_fft_support.che77.set('''Sampling rate must be
around 20000''')
                else:
                    window_fft_support.che77.set('''Sampling rate must be
around 40000''')
                

        

            
       
        
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Courier New} -size 10 -weight normal -slant"  \
            " roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"

        top.geometry("1366x700+650+150")
        top.title("New Toplevel")
        top.configure(background="black")



        self.menubar = Menu(top,font=font9,bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)



        self.Label1 = Label(top)
        self.Label1.place(relx=0.03, rely=0.30, height=31, width=254)
        self.Label1.configure(background="white")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Input Sampling Rate''')
        self.Label1.configure(width=254)

        self.Label9 = Label(top)
        self.Label9.place(relx=0.03, rely=0.04, height=61, width=270)
        self.Label9.configure(background="cyan")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(text='''Default fundamental frequency of tank circuit:5 Hz
Default sampling rate(fs):150
fs increases with increase in f''')
        self.Label1.configure(width=270)

        self.Entry1 = Entry(top)
        self.Entry1.place(relx=0.24, rely=0.30,height=20, relwidth=0.12)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font=font10)
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")

        self.Label2 = Label(top)
        self.Label2.place(relx=0.03, rely=0.40, height=31, width=254)
        self.Label2.configure(background="white")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Input    Capacitance''')
        self.Label2.configure(width=254)

        self.Entry2 = Entry(top)
        self.Entry2.place(relx=0.24, rely=0.40,height=20, relwidth=0.12)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font=font10)
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(insertbackground="black")

        self.Label3 = Label(top)
        self.Label3.place(relx=0.03, rely=0.50, height=31, width=254)
        self.Label3.configure(background="white")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Input    Inductance ''')
        self.Label3.configure(width=254)

        self.Entry3 = Entry(top)
        self.Entry3.place(relx=0.24, rely=0.50,height=20, relwidth=0.12)
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font=font10)
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(insertbackground="black")

        self.Label4 = Label(top)
        self.Label4.place(relx=0.42, rely=0.01, height=31, width=194)
        self.Label4.configure(background="white")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Choose Waveform''')
        self.Label4.configure(width=194)

        self.Checkbutton1 = Checkbutton(top)
        self.Checkbutton1.place(relx=0.4, rely=0.1, relheight=0.04
                , relwidth=0.06)
        self.Checkbutton1.configure(activebackground="#d9d9d9")
        self.Checkbutton1.configure(activeforeground="#000000")
        self.Checkbutton1.configure(background="red")
        self.Checkbutton1.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1.configure(highlightcolor="black")
        self.Checkbutton1.configure(justify=LEFT)
        self.Checkbutton1.configure(text='''SINE''')
        self.Checkbutton1.configure(variable=window_fft_support.che46)
        self.Checkbutton1.configure(width=81)
        window_fft_support.che46.set(0)
        

        self.Checkbutton2 = Checkbutton(top)
        self.Checkbutton2.place(relx=0.48, rely=0.1, relheight=0.04
                , relwidth=0.06)
        self.Checkbutton2.configure(activebackground="#d9d9d9")
        self.Checkbutton2.configure(activeforeground="#000000")
        self.Checkbutton2.configure(background="red")
        self.Checkbutton2.configure(disabledforeground="#a3a3a3")
        self.Checkbutton2.configure(foreground="#000000")
        self.Checkbutton2.configure(highlightbackground="#d9d9d9")
        self.Checkbutton2.configure(highlightcolor="black")
        self.Checkbutton2.configure(justify=LEFT)
        self.Checkbutton2.configure(text='''SQRZ''')
        self.Checkbutton2.configure(variable=window_fft_support.che47)
        self.Checkbutton2.configure(width=81)
        window_fft_support.che47.set(0)

        self.Checkbutton3 = Checkbutton(top)
        self.Checkbutton3.place(relx=0.57, rely=0.1, relheight=0.04
                , relwidth=0.06)
        self.Checkbutton3.configure(activebackground="#d9d9d9")
        self.Checkbutton3.configure(activeforeground="#000000")
        self.Checkbutton3.configure(background="red")
        self.Checkbutton3.configure(disabledforeground="#a3a3a3")
        self.Checkbutton3.configure(foreground="#000000")
        self.Checkbutton3.configure(highlightbackground="#d9d9d9")
        self.Checkbutton3.configure(highlightcolor="black")
        self.Checkbutton3.configure(justify=LEFT)
        self.Checkbutton3.configure(text='''TRIA''')
        self.Checkbutton3.configure(variable=window_fft_support.che48)
        self.Checkbutton3.configure(width=81)
        window_fft_support.che48.set(0)

        self.Checkbutton4 = Checkbutton(top)
        self.Checkbutton4.place(relx=0.39, rely=0.24, relheight=0.04
                , relwidth=0.07)
        self.Checkbutton4.configure(activebackground="#d9d9d9")
        self.Checkbutton4.configure(activeforeground="#000000")
        self.Checkbutton4.configure(background="red")
        self.Checkbutton4.configure(disabledforeground="#a3a3a3")
        self.Checkbutton4.configure(foreground="#000000")
        self.Checkbutton4.configure(highlightbackground="#d9d9d9")
        self.Checkbutton4.configure(highlightcolor="black")
        self.Checkbutton4.configure(justify=LEFT)
        self.Checkbutton4.configure(text='''HWR~''')
        self.Checkbutton4.configure(variable=window_fft_support.che49)
        self.Checkbutton4.configure(width=101)
        window_fft_support.che49.set(0)

        self.Checkbutton5 = Checkbutton(top)
        self.Checkbutton5.place(relx=0.48, rely=0.24, relheight=0.04
                , relwidth=0.07)
        self.Checkbutton5.configure(activebackground="#d9d9d9")
        self.Checkbutton5.configure(activeforeground="#000000")
        self.Checkbutton5.configure(background="red")
        self.Checkbutton5.configure(disabledforeground="#a3a3a3")
        self.Checkbutton5.configure(foreground="#000000")
        self.Checkbutton5.configure(highlightbackground="#d9d9d9")
        self.Checkbutton5.configure(highlightcolor="black")
        self.Checkbutton5.configure(justify=LEFT)
        self.Checkbutton5.configure(text='''FWR~''')
        self.Checkbutton5.configure(variable=window_fft_support.che50)
        self.Checkbutton5.configure(width=91)
        window_fft_support.che50.set(0)

        self.Label5 = Label(top)
        self.Label5.place(relx=0.65, rely=0.01, height=31, width=184)
        self.Label5.configure(background="white")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='''Enter no. of waves''')
        self.Label5.configure(width=184)

        self.Checkbutton6 = Checkbutton(top)
        self.Checkbutton6.place(relx=0.69, rely=0.1, relheight=0.04
                , relwidth=0.1)
        self.Checkbutton6.configure(activebackground="#d9d9d9")
        self.Checkbutton6.configure(activeforeground="#000000")
        self.Checkbutton6.configure(background="blue")
        self.Checkbutton6.configure(disabledforeground="#a3a3a3")
        self.Checkbutton6.configure(foreground="#000000")
        self.Checkbutton6.configure(highlightbackground="#d9d9d9")
        self.Checkbutton6.configure(highlightcolor="black")
        self.Checkbutton6.configure(justify=LEFT)
        self.Checkbutton6.configure(text='''Select multiple waves''')
        self.Checkbutton6.configure(variable=window_fft_support.che52)
        self.Checkbutton6.configure(width=131)
        window_fft_support.che52.set(0)

        #frequency entry for multiple waves
        self.Entry4 = Entry(top)
        self.Entry4.place(relx=0.78, rely=0.16,height=20, relwidth=0.08)
        self.Entry4.configure(background="white")
        self.Entry4.configure(disabledforeground="#a3a3a3")
        self.Entry4.configure(font=font10)
        self.Entry4.configure(foreground="#000000")
        self.Entry4.configure(insertbackground="black")

        self.Entry19 = Entry(top)
        self.Entry19.place(relx=0.78, rely=0.21,height=20, relwidth=0.08)
        self.Entry19.configure(background="white")
        self.Entry19.configure(disabledforeground="#a3a3a3")
        self.Entry19.configure(font=font10)
        self.Entry19.configure(foreground="#000000")
        self.Entry19.configure(insertbackground="black")

        self.Entry11 = Entry(top)
        self.Entry11.place(relx=0.78, rely=0.26,height=20, relwidth=0.08)
        self.Entry11.configure(background="white")
        self.Entry11.configure(disabledforeground="#a3a3a3")
        self.Entry11.configure(font=font10)
        self.Entry11.configure(foreground="#000000")
        self.Entry11.configure(insertbackground="black")

        #self.Label6 = Label(top)
        #self.Label6.place(relx=0.81, rely=0.01, height=41, width=214)
        #self.Label6.configure(background="white")
        #self.Label6.configure(disabledforeground="#a3a3a3")
        #self.Label6.configure(foreground="#000000")
        #self.Label6.configure(text='''Enter wave to be sampled''')
        #self.Label6.configure(width=214)

        #entry for input frequency
        self.Entry5 = Entry(top)
        self.Entry5.place(relx=0.24, rely=0.15,height=20, relwidth=0.12)
        self.Entry5.configure(background="orange1")
        self.Entry5.configure(disabledforeground="#a3a3a3")
        self.Entry5.configure(font='TimesNewRoman 15 bold' )
        self.Entry5.configure(foreground="#000000")
        self.Entry5.configure(insertbackground="black")

        self.Label7 = Label(top)
        self.Label7.place(relx=0.45, rely=0.16, height=31, width=84)
        self.Label7.configure(background="white")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(text='''Duty Cycle in %''')
        self.Label7.configure(width=84)

        self.Entry6 = Entry(top)
        self.Entry6.place(relx=0.52, rely=0.16,height=20, relwidth=0.03)
        self.Entry6.configure(background="white")
        self.Entry6.configure(disabledforeground="#a3a3a3")
        self.Entry6.configure(font=font10)
        self.Entry6.configure(foreground="#000000")
        self.Entry6.configure(insertbackground="black")
        self.Entry6.configure(width=44)

        self.Label8 = Label(top)
        self.Label8.place(relx=0.56, rely=0.16, height=31, width=84)
        self.Label8.configure(background="white")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(text='''Duty Cycle in %''')
        self.Label8.configure(width=84)

        self.Entry7 = Entry(top)
        self.Entry7.place(relx=0.63, rely=0.16,height=20, relwidth=0.03)
        self.Entry7.configure(background="white")
        self.Entry7.configure(disabledforeground="#a3a3a3")
        self.Entry7.configure(font=font10)
        self.Entry7.configure(foreground="#000000")
        self.Entry7.configure(insertbackground="black")
        self.Entry7.configure(width=44)

        self.Checkbutton7 = Checkbutton(top)
        self.Checkbutton7.place(relx=0.85, rely=0.01, relheight=0.09
                , relwidth=0.08)
        self.Checkbutton7.configure(activebackground="#d9d9d9")
        self.Checkbutton7.configure(activeforeground="#000000")
        self.Checkbutton7.configure(background="blue")
        self.Checkbutton7.configure(disabledforeground="#a3a3a3")
        self.Checkbutton7.configure(foreground="#000000")
        self.Checkbutton7.configure(highlightbackground="#d9d9d9")
        self.Checkbutton7.configure(highlightcolor="black")
        self.Checkbutton7.configure(justify=LEFT)
        self.Checkbutton7.configure(text='''ADD WAVES''')
        self.Checkbutton7.configure(variable=window_fft_support.che61)
        self.Checkbutton7.configure(width=111)
        window_fft_support.che61.set(0)

        #self.Checkbutton8 = Checkbutton(top)
        #self.Checkbutton8.place(relx=0.23, rely=0.57, relheight=0.06
                #, relwidth=0.1)
        #self.Checkbutton8.configure(activebackground="#d9d9d9")
        #self.Checkbutton8.configure(activeforeground="#000000")
        #self.Checkbutton8.configure(background="blue")
        #self.Checkbutton8.configure(disabledforeground="#a3a3a3")
        #self.Checkbutton8.configure(foreground="#000000")
        #self.Checkbutton8.configure(highlightbackground="#d9d9d9")
        #self.Checkbutton8.configure(highlightcolor="black")
        #self.Checkbutton8.configure(justify=LEFT)
        #self.Checkbutton8.configure(text='''SAMPLE WAVE''')
        #self.Checkbutton8.configure(variable=window_fft_support.che62)
        #self.Checkbutton8.configure(width=131)
        #window_fft_support.che62.set(0)

        self.Label9 = Label(top)
        self.Label9.place(relx=0.03, rely=0.15, height=31, width=254)
        self.Label9.configure(background="orange1")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(text='''Input Frequency''')
        self.Label9.configure(width=144)

        #self.Entry8 = Entry(top)
        #self.Entry8.place(relx=0.34, rely=0.65,height=20, relwidth=0.07)
        #self.Entry8.configure(background="white")
        #self.Entry8.configure(disabledforeground="#a3a3a3")
        #self.Entry8.configure(font=font10)
        #self.Entry8.configure(foreground="#000000")
        #self.Entry8.configure(insertbackground="black")
        #self.Entry8.configure(width=94)

        self.Checkbutton9 = Checkbutton(top)
        self.Checkbutton9.place(relx=0.71, rely=0.46, relheight=0.06
                , relwidth=0.19)
        self.Checkbutton9.configure(activebackground="blue")
        self.Checkbutton9.configure(activeforeground="#000000")
        self.Checkbutton9.configure(background="blue")
        self.Checkbutton9.configure(disabledforeground="#a3a3a3")
        self.Checkbutton9.configure(foreground="#000000")
        self.Checkbutton9.configure(highlightbackground="#d9d9d9")
        self.Checkbutton9.configure(highlightcolor="black")
        self.Checkbutton9.configure(justify=LEFT)
        self.Checkbutton9.configure(text='''Windowing''')
        self.Checkbutton9.configure(variable=window_fft_support.che65)
        self.Checkbutton9.configure(width=261)
        window_fft_support.che65.set(0)

        self.Checkbutton10 = Checkbutton(top)
        self.Checkbutton10.place(relx=0.75, rely=0.53, relheight=0.04
                , relwidth=0.13)
        self.Checkbutton10.configure(activebackground="#d9d9d9")
        self.Checkbutton10.configure(activeforeground="#000000")
        self.Checkbutton10.configure(background="yellow")
        self.Checkbutton10.configure(disabledforeground="#a3a3a3")
        self.Checkbutton10.configure(foreground="#000000")
        self.Checkbutton10.configure(highlightbackground="#d9d9d9")
        self.Checkbutton10.configure(highlightcolor="black")
        self.Checkbutton10.configure(justify=LEFT)
        self.Checkbutton10.configure(text='''Hamming''')
        self.Checkbutton10.configure(variable=window_fft_support.che66)
        self.Checkbutton10.configure(width=161)
        window_fft_support.che66.set(0)

        self.Checkbutton12 = Checkbutton(top)
        self.Checkbutton12.place(relx=0.75, rely=0.59, relheight=0.04
                , relwidth=0.13)
        self.Checkbutton12.configure(activebackground="#d9d9d9")
        self.Checkbutton12.configure(activeforeground="#000000")
        self.Checkbutton12.configure(background="yellow")
        self.Checkbutton12.configure(disabledforeground="#a3a3a3")
        self.Checkbutton12.configure(foreground="#000000")
        self.Checkbutton12.configure(highlightbackground="#d9d9d9")
        self.Checkbutton12.configure(highlightcolor="black")
        self.Checkbutton12.configure(justify=LEFT)
        self.Checkbutton12.configure(text='''Hanning''')
        self.Checkbutton12.configure(variable=window_fft_support.che68)
        self.Checkbutton12.configure(width=181)
        window_fft_support.che68.set(0)

        self.Checkbutton13 = Checkbutton(top)
        self.Checkbutton13.place(relx=0.75, rely=0.64, relheight=0.04
                , relwidth=0.13)
        self.Checkbutton13.configure(activebackground="#d9d9d9")
        self.Checkbutton13.configure(activeforeground="#000000")
        self.Checkbutton13.configure(background="yellow")
        self.Checkbutton13.configure(disabledforeground="#a3a3a3")
        self.Checkbutton13.configure(foreground="#000000")
        self.Checkbutton13.configure(highlightbackground="#d9d9d9")
        self.Checkbutton13.configure(highlightcolor="black")
        self.Checkbutton13.configure(justify=LEFT)
        self.Checkbutton13.configure(text='''Blackmann''')
        self.Checkbutton13.configure(variable=window_fft_support.che69)
        self.Checkbutton13.configure(width=221)
        window_fft_support.che69.set(0)

        self.Checkbutton14 = Checkbutton(top)
        self.Checkbutton14.place(relx=0.75, rely=0.7, relheight=0.04
                , relwidth=0.13)
        self.Checkbutton14.configure(activebackground="#d9d9d9")
        self.Checkbutton14.configure(activeforeground="#000000")
        self.Checkbutton14.configure(background="yellow")
        self.Checkbutton14.configure(disabledforeground="#a3a3a3")
        self.Checkbutton14.configure(foreground="#000000")
        self.Checkbutton14.configure(highlightbackground="#d9d9d9")
        self.Checkbutton14.configure(highlightcolor="black")
        self.Checkbutton14.configure(justify=LEFT)
        self.Checkbutton14.configure(text='''Kaiser''')
        self.Checkbutton14.configure(variable=window_fft_support.che70)
        self.Checkbutton14.configure(width=181)
        window_fft_support.che70.set(0)

        self.Label10 = Label(top)
        self.Label10.place(relx=0.79, rely=0.76, height=31, width=120)
        self.Label10.configure(background="white")
        self.Label10.configure(disabledforeground="#a3a3a3")
        self.Label10.configure(foreground="#000000")
        self.Label10.configure(text='''Enter beta''')
        self.Label10.configure(width=120)

        self.Entry9 = Entry(top)
        self.Entry9.place(relx=0.90, rely=0.77,height=20, relwidth=0.08)
        self.Entry9.configure(background="white")
        self.Entry9.configure(disabledforeground="#a3a3a3")
        self.Entry9.configure(font=font10)
        self.Entry9.configure(foreground="#000000")
        self.Entry9.configure(insertbackground="black")
        self.Entry9.configure(width=104)

        self.Button1 = Button(top)
        self.Button1.place(relx=0.45, rely=0.68, height=104, width=257)
        self.Button1.configure(activebackground="white")
        self.Button1.configure(activeforeground="red")
        self.Button1.configure(background="salmon1")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="black")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''GRAPH''',font='TimesNewRoman 18 bold')
        self.Button1.configure(width=257)
        self.Button1.configure(command=self.butfunc)

        self.Checkbutton15 = Checkbutton(top)
        self.Checkbutton15.place(relx=0.24, rely=0.44, relheight=0.04
                , relwidth=0.06)
        self.Checkbutton15.configure(activebackground="#d9d9d9")
        self.Checkbutton15.configure(activeforeground="#000000")
        self.Checkbutton15.configure(background="white")
        self.Checkbutton15.configure(disabledforeground="#a3a3a3")
        self.Checkbutton15.configure(foreground="#000000")
        self.Checkbutton15.configure(highlightbackground="#d9d9d9")
        self.Checkbutton15.configure(highlightcolor="black")
        self.Checkbutton15.configure(justify=LEFT)
        self.Checkbutton15.configure(text='''microF''')
        self.Checkbutton15.configure(variable=window_fft_support.che71)
        self.Checkbutton15.configure(width=131)
        window_fft_support.che71.set(0)

        self.Checkbutton16 = Checkbutton(top)
        self.Checkbutton16.place(relx=0.29, rely=0.44, relheight=0.04
                , relwidth=0.06)
        self.Checkbutton16.configure(activebackground="#d9d9d9")
        self.Checkbutton16.configure(activeforeground="#000000")
        self.Checkbutton16.configure(background="white")
        self.Checkbutton16.configure(disabledforeground="#a3a3a3")
        self.Checkbutton16.configure(foreground="#000000")
        self.Checkbutton16.configure(highlightbackground="#d9d9d9")
        self.Checkbutton16.configure(highlightcolor="black")
        self.Checkbutton16.configure(justify=LEFT)
        self.Checkbutton16.configure(text='''milliF''')
        self.Checkbutton16.configure(variable=window_fft_support.che72)
        self.Checkbutton16.configure(width=131)
        window_fft_support.che72.set(0)

        self.Checkbutton17 = Checkbutton(top)
        self.Checkbutton17.place(relx=0.24, rely=0.54, relheight=0.04
                , relwidth=0.06)
        self.Checkbutton17.configure(activebackground="#d9d9d9")
        self.Checkbutton17.configure(activeforeground="#000000")
        self.Checkbutton17.configure(background="white")
        self.Checkbutton17.configure(disabledforeground="#a3a3a3")
        self.Checkbutton17.configure(foreground="#000000")
        self.Checkbutton17.configure(highlightbackground="#d9d9d9")
        self.Checkbutton17.configure(highlightcolor="black")
        self.Checkbutton17.configure(justify=LEFT)
        self.Checkbutton17.configure(text='''microH''')
        self.Checkbutton17.configure(variable=window_fft_support.che73)
        self.Checkbutton17.configure(width=131)
        window_fft_support.che73.set(0)

        self.Checkbutton18 = Checkbutton(top)
        self.Checkbutton18.place(relx=0.30, rely=0.54, relheight=0.04
                , relwidth=0.06)
        self.Checkbutton18.configure(activebackground="#d9d9d9")
        self.Checkbutton18.configure(activeforeground="#000000")
        self.Checkbutton18.configure(background="white")
        self.Checkbutton18.configure(disabledforeground="#a3a3a3")
        self.Checkbutton18.configure(foreground="#000000")
        self.Checkbutton18.configure(highlightbackground="#d9d9d9")
        self.Checkbutton18.configure(highlightcolor="black")
        self.Checkbutton18.configure(justify=LEFT)
        self.Checkbutton18.configure(text='''milliH''')
        self.Checkbutton18.configure(variable=window_fft_support.che74)
        self.Checkbutton18.configure(width=131)
        window_fft_support.che74.set(0)

        self.Checkbutton19 = Checkbutton(top)
        self.Checkbutton19.place(relx=0.03, rely=0.25, relheight=0.04
                , relwidth=0.1)
        self.Checkbutton19.configure(activebackground="#d9d9d9")
        self.Checkbutton19.configure(activeforeground="#000000")
        self.Checkbutton19.configure(background="white")
        self.Checkbutton19.configure(disabledforeground="#a3a3a3")
        self.Checkbutton19.configure(foreground="#000000")
        self.Checkbutton19.configure(highlightbackground="#d9d9d9")
        self.Checkbutton19.configure(highlightcolor="black")
        self.Checkbutton19.configure(justify=LEFT)
        self.Checkbutton19.configure(text='''Customize''')
        self.Checkbutton19.configure(variable=window_fft_support.che75)
        self.Checkbutton19.configure(width=131)
        window_fft_support.che75.set(0)

        self.Checkbutton20 = Checkbutton(top)
        self.Checkbutton20.place(relx=0.03, rely=0.35, relheight=0.04
                , relwidth=0.1)
        self.Checkbutton20.configure(activebackground="#d9d9d9")
        self.Checkbutton20.configure(activeforeground="#000000")
        self.Checkbutton20.configure(background="white")
        self.Checkbutton20.configure(disabledforeground="#a3a3a3")
        self.Checkbutton20.configure(foreground="#000000")
        self.Checkbutton20.configure(highlightbackground="#d9d9d9")
        self.Checkbutton20.configure(highlightcolor="black")
        self.Checkbutton20.configure(justify=LEFT)
        self.Checkbutton20.configure(text='''Customize''')
        self.Checkbutton20.configure(variable=window_fft_support.che76)
        self.Checkbutton20.configure(width=131)
        window_fft_support.che76.set(0)

        self.Label1 = Label(top)
        self.Label1.place(relx=0.03, rely=0.75, height=121, width=254)
        self.Label1.configure(background="white")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(textvariable=window_fft_support.che77)
        self.Label1.configure(width=254)
        window_fft_support.che77.set('ERROR MESSAGES')

        self.Checkbutton21 = Checkbutton(top)
        self.Checkbutton21.place(relx=0.69, rely=0.15, relheight=0.04
                , relwidth=0.08)
        self.Checkbutton21.configure(activebackground="#d9d9d9")
        self.Checkbutton21.configure(activeforeground="#000000")
        self.Checkbutton21.configure(background="white")
        self.Checkbutton21.configure(disabledforeground="#a3a3a3")
        self.Checkbutton21.configure(foreground="#000000")
        self.Checkbutton21.configure(highlightbackground="#d9d9d9")
        self.Checkbutton21.configure(highlightcolor="black")
        self.Checkbutton21.configure(justify=LEFT)
        self.Checkbutton21.configure(text='''Wave 1''')
        self.Checkbutton21.configure(variable=window_fft_support.che78)
        self.Checkbutton21.configure(width=131)
        window_fft_support.che78.set(0)

        self.Checkbutton22 = Checkbutton(top)
        self.Checkbutton22.place(relx=0.69, rely=0.20, relheight=0.04
                , relwidth=0.08)
        self.Checkbutton22.configure(activebackground="#d9d9d9")
        self.Checkbutton22.configure(activeforeground="#000000")
        self.Checkbutton22.configure(background="white")
        self.Checkbutton22.configure(disabledforeground="#a3a3a3")
        self.Checkbutton22.configure(foreground="#000000")
        self.Checkbutton22.configure(highlightbackground="#d9d9d9")
        self.Checkbutton22.configure(highlightcolor="black")
        self.Checkbutton22.configure(justify=LEFT)
        self.Checkbutton22.configure(text='''Wave 2''')
        self.Checkbutton22.configure(variable=window_fft_support.che79)
        self.Checkbutton22.configure(width=131)
        window_fft_support.che79.set(0)

        self.Checkbutton23 = Checkbutton(top)
        self.Checkbutton23.place(relx=0.69, rely=0.25, relheight=0.04
                , relwidth=0.08)
        self.Checkbutton23.configure(activebackground="#d9d9d9")
        self.Checkbutton23.configure(activeforeground="#000000")
        self.Checkbutton23.configure(background="white")
        self.Checkbutton23.configure(disabledforeground="#a3a3a3")
        self.Checkbutton23.configure(foreground="#000000")
        self.Checkbutton23.configure(highlightbackground="#d9d9d9")
        self.Checkbutton23.configure(highlightcolor="black")
        self.Checkbutton23.configure(justify=LEFT)
        self.Checkbutton23.configure(text='''Wave 3''')
        self.Checkbutton23.configure(variable=window_fft_support.che80)
        self.Checkbutton23.configure(width=131)
        window_fft_support.che80.set(0)

        choices1 = { 'sine','tria','sqrz'}
        window_fft_support.che81.set('sine')
        self.menu1 = OptionMenu(top,window_fft_support.che81,*choices1)
        self.menu1.place(relx=0.88,rely=0.15,relheight=0.04,relwidth=0.06)
        self.menu1.configure(background="white")
        #self.menu1.configure(textvariable=window_fft_support.che81)

        choices2 = { 'sine','tria','sqrz'}
        window_fft_support.che82.set('sine')
        self.menu2 = OptionMenu(top,window_fft_support.che82,*choices2)
        self.menu2.place(relx=0.88,rely=0.20,relheight=0.04,relwidth=0.06)
        self.menu2.configure(background="white")

        choices3 = { 'sine','tria','sqrz'}
        window_fft_support.che83.set('sine')
        self.menu3 = OptionMenu(top,window_fft_support.che83,*choices3)
        self.menu3.place(relx=0.88,rely=0.25,relheight=0.04,relwidth=0.06)
        self.menu3.configure(background="white")
       
        








if __name__ == '__main__':
    vp_start_gui()


